const { google } = require('googleapis');

const SPREADSHEET_ID = process.env.spreadsheetId;
const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS_JSON);
const auth = new google.auth.GoogleAuth({ credentials, scopes: ['https://www.googleapis.com/auth/spreadsheets'] });
const sheets = google.sheets({ version: 'v4', auth });

async function getAvailableAccount(sheetName, user, serverFilter = null) {
    const isDiscord = sheetName === 'Discord';
    const range = isDiscord ? `${sheetName}!A2:F` : `${sheetName}!A2:E`;
    try {
        const response = await sheets.spreadsheets.values.get({ spreadsheetId: SPREADSHEET_ID, range });
        const rows = response.data.values;
        if (!rows || rows.length === 0) return null;

        let availableRowIndex = -1;
        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            if (!row || typeof row[1] !== 'string' || row[1].trim() === '') continue;

            const isUsed = String(row[0]).toUpperCase() === 'TRUE';
            if (!isUsed) {
                const bans = (isDiscord ? (row[4] || "") : (row[3] || "")).toLowerCase();
                if (serverFilter) {
                    if (!bans.includes(serverFilter.toLowerCase())) { availableRowIndex = i; break; }
                } else {
                    availableRowIndex = i; break;
                }
            }
        }

        if (availableRowIndex === -1) return null;

        const sheetRowNumber = availableRowIndex + 2;
        const rowData = rows[availableRowIndex];
        const accountData = isDiscord
            ? { email: rowData[1], pass: rowData[2], twoFactorToken: rowData[3], bans: rowData[4] || 'Sin baneos' }
            : { email: rowData[1], pass: rowData[2], bans: rowData[3] || 'Sin baneos', twoFactorToken: null };
        
        const timestamp = new Date().toLocaleString('es-ES', { timeZone: 'Europe/Madrid' });
        const statusColumn = isDiscord ? 'F' : 'E';
        const statusMessage = `✅ Usada por ${user.tag} (${user.id}) el ${timestamp}`;
        
        await sheets.spreadsheets.values.update({ spreadsheetId: SPREADSHEET_ID, range: `${sheetName}!A${sheetRowNumber}`, valueInputOption: 'USER_ENTERED', resource: { values: [['TRUE']] } });
        await sheets.spreadsheets.values.update({ spreadsheetId: SPREADSHEET_ID, range: `${sheetName}!${statusColumn}${sheetRowNumber}`, valueInputOption: 'USER_ENTERED', resource: { values: [[statusMessage]] } });
        
        return accountData;
    } catch (error) { console.error(`Error en getAvailableAccount para ${sheetName}:`, error); return null; }
}

async function addMultipleAccounts(sheetName, accountsString) {
    try {
        const response = await sheets.spreadsheets.values.get({ spreadsheetId: SPREADSHEET_ID, range: `${sheetName}!B:B` });
        const allValues = response.data.values || [];
        const existingEmails = new Set(allValues.flat().map(e => e.toLowerCase()));
        
        let firstEmptyRow = allValues.findIndex(row => !row[0] || row[0] === '') + 1;
        if (firstEmptyRow === 0) firstEmptyRow = allValues.length + 1;
        if (firstEmptyRow === 1) firstEmptyRow = 2;

        const lines = accountsString.split('\n').filter(line => line.trim() !== "");
        const newRowsData = [];
        const duplicates = [];

        lines.forEach(line => {
            const email = (sheetName === 'Discord' ? (line.match(/E-Mail:\s*([^|]+)/i) || [])[1] : (line.split(/[:|;]/)[0] || "")).trim();
            if (email && !existingEmails.has(email.toLowerCase())) {
                if (sheetName === 'Discord') {
                    const passMatch = line.match(/Password:\s*([^|]+)/i);
                    const tokenMatch = line.match(/2FA Token:\s*([^|]+)/i);
                    if (passMatch && tokenMatch) {
                        newRowsData.push([false, email, passMatch[1].trim(), tokenMatch[1].trim(), "", ""]);
                    }
                } else {
                    const parts = line.split(/[:|;]/);
                    if (parts.length >= 2) newRowsData.push([false, email, parts[1].trim(), "", ""]);
                }
                existingEmails.add(email.toLowerCase());
            } else if (email) {
                duplicates.push(email);
            }
        });
        
        if (newRowsData.length > 0) {
            const range = `${sheetName}!A${firstEmptyRow}`;
            await sheets.spreadsheets.values.update({
                spreadsheetId: SPREADSHEET_ID,
                range,
                valueInputOption: 'USER_ENTERED',
                resource: { values: newRowsData },
            });
        }
        return { added: newRowsData.length, duplicates: duplicates.length };
    } catch (error) { console.error("Error en addMultipleAccounts:", error); return { error: true }; }
}

// ... (Aquí irían las demás funciones que ya tienes: verifyAuthCode, addBanByEmail, etc.)

module.exports = {
    // ... (Asegúrate de exportar todas las funciones necesarias)
};