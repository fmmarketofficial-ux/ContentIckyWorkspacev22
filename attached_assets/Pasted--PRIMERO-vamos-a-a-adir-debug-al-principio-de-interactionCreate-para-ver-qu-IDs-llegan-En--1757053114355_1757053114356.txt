// PRIMERO, vamos a a√±adir debug al principio de interactionCreate para ver qu√© IDs llegan

// En events/interactionCreate.js, al principio de la secci√≥n if (interaction.isButton())
// A√ëADE ESTAS L√çNEAS DE DEBUG:

if (interaction.isButton()) {
    console.log(`üîç DEBUG - Button pressed:`);
    console.log(`- customId completo: "${interaction.customId}"`);
    
    const [action, ...args] = interaction.customId.split("_");
    console.log(`- action: "${action}"`);
    console.log(`- args: [${args.map(a => `"${a}"`).join(', ')}]`);
    
    switch (action) {
        // ... resto del c√≥digo
    }
}

// TAMBI√âN, corrige la creaci√≥n de botones en handleGetPack (util/sheets.js o donde est√©)
// El problema podr√≠a estar en c√≥mo se crean los IDs de los botones del pack

// En la funci√≥n handleGetPack, REEMPLAZA la creaci√≥n de botones con esto:

const actionRow = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
        .setCustomId(`pack_otp_${pack.FiveM.email}_${pack.FiveM.pass}`)
        .setLabel("OTP FiveM")
        .setStyle(ButtonStyle.Secondary)
        .setEmoji(EMOJIS.otp),
    new ButtonBuilder()
        .setCustomId(`pack_2fa_${pack.Discord.twoFactorToken}`)
        .setLabel("2FA Discord")
        .setStyle(ButtonStyle.Secondary)
        .setEmoji(EMOJIS.otp),
    new ButtonBuilder()
        .setCustomId(`pack_add_ban_${packEmails}`)
        .setLabel("A√±adir Baneo")
        .setStyle(ButtonStyle.Danger)
        .setEmoji(EMOJIS.ban),
    new ButtonBuilder()
        .setCustomId(`pack_release_${packEmails}`)
        .setLabel("Devolver Pack")
        .setStyle(ButtonStyle.Success)
        .setEmoji(EMOJIS.check),
);

// Y a√±ade estos logs JUSTO DESPU√âS de crear los botones:
console.log(`üîç DEBUG - Botones del pack creados:`);
console.log(`- OTP Button ID: "pack_otp_${pack.FiveM.email}_${pack.FiveM.pass}"`);
console.log(`- 2FA Button ID: "pack_2fa_${pack.Discord.twoFactorToken}"`);
console.log(`- Ban Button ID: "pack_add_ban_${packEmails}"`);
console.log(`- Release Button ID: "pack_release_${packEmails}"`);

// TAMBI√âN, aseg√∫rate de que el case "pack" est√© DENTRO del switch principal
// No como un case separado. Deber√≠a verse as√≠:

switch (action) {
    case "panel":
        // ... c√≥digo del panel
        break;
    case "add":
        // ... c√≥digo de add
        break;
    case "release":
        // ... c√≥digo de release
        break;
    case "get":
        // ... c√≥digo de get
        break;
    case "pack":  // ‚Üê ASEG√öRATE DE QUE EST√â AQU√ç
        console.log(`üîç DEBUG - Entrando en case "pack" con args:`, args);
        
        const packEmailsRaw = args.slice(2).join("_");
        const packEmails = packEmailsRaw.split(",");
        
        console.log(`üîç DEBUG - Pack parsing:`);
        console.log(`- args[0]: "${args[0]}"`);
        console.log(`- args[1]: "${args[1]}"`);
        console.log(`- packEmailsRaw: "${packEmailsRaw}"`);
        console.log(`- packEmails: [${packEmails.map(e => `"${e}"`).join(', ')}]`);
        
        if (args[0] === "add" && args[1] === "ban") {
            console.log(`‚úÖ Ejecutando pack add ban`);
            const modal = new ModalBuilder()
                .setCustomId(`pack_ban_modal_${packEmailsRaw}`)
                .setTitle(`A√±adir Baneo al Pack`);
            const serverInput = new TextInputBuilder()
                .setCustomId("ban_server")
                .setLabel("Nombre del servidor")
                .setStyle(TextInputStyle.Short)
                .setRequired(true);
            modal.addComponents(
                new ActionRowBuilder().addComponents(serverInput),
            );
            await interaction.showModal(modal);
        }
        else if (args[0] === "release") {
            console.log(`‚úÖ Ejecutando pack release`);
            await interaction.deferUpdate();
            
            let releasedCount = 0;
            for (const email of packEmails) {
                if (email && email.trim()) {
                    console.log(`üîÑ Liberando: "${email.trim()}"`);
                    const result = await releaseAccountByEmail(email.trim());
                    if (result.success) releasedCount++;
                }
            }
            
            try {
                const channel = await interaction.client.channels.fetch(interaction.channelId);
                const message = await channel.messages.fetch(interaction.message.id);
                const disabledRow = ActionRowBuilder.from(message.components[0]);
                disabledRow.components.forEach((c) => c.setDisabled(true));
                await message.edit({ components: [disabledRow] });
            } catch (editError) {
                console.error("Error al editar mensaje del pack:", editError.message);
            }
            
            await interaction.followUp({
                content: `<:${EMOJIS.check}:${EMOJIS.check}> Pack liberado: ${releasedCount} cuentas devueltas.`,
                ephemeral: true,
            });
        }
        else if (args[0] === "otp") {
            console.log(`‚úÖ Ejecutando pack OTP`);
            await interaction.reply({
                content: `${formatEmoji(STATUS_EMOJIS.key)} Buscando OTP del pack...`,
                ephemeral: true,
            });
            
            const email = args[1];
            const password = args[2];
            console.log(`üîç Pack OTP - email: "${email}", password: "${password}"`);
            
            const result = await getOtpFromWebmail(email, password);
            await interaction.editReply(
                result.success
                    ? `${formatEmoji(STATUS_EMOJIS.success)} **C√≥digo OTP (FiveM del Pack):** \`${result.code}\``
                    : `${formatEmoji(STATUS_EMOJIS.error)} **Error:** ${result.error}`,
            );
        }
        else if (args[0] === "2fa") {
            console.log(`‚úÖ Ejecutando pack 2FA`);
            await interaction.reply({
                content: `${formatEmoji(STATUS_EMOJIS.key)} Pidiendo 2FA del pack...`,
                ephemeral: true,
            });
            
            const token2FA = args.slice(1).join("_");
            console.log(`üîç Pack 2FA - token: "${token2FA}"`);
            
            // ... resto del c√≥digo 2FA igual que antes
        }
        else {
            console.log(`‚ùå Pack action no reconocida: "${args[0]}"`);
        }
        break;
}